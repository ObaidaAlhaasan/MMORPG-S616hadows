{"version":3,"sources":["../../src/routes/password.js"],"names":["email","process","env","EMAIL","password","PASSWORD","smtpTransport","nodemailer","createTransport","service","EMAIL_PROVIDER","auth","user","pass","handlebarsOptions","viewEngine","extName","defaultLayout","partialsDir","layoutsDir","viewPath","path","resolve","use","router","express","Router","post","request","response","userEmail","body","UserModel","findOne","status","json","message","buffer","crypto","randomBytes","token","toString","findByIdAndUpdate","_id","resetToken","resetTokenExp","Date","now","emailOptions","to","from","template","subject","context","name","url","PORT","sendMail","$gt","verifiedPassword","undefined","save","username"],"mappings":"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","sourcesContent":["import express from 'express';\nimport hbs from 'nodemailer-express-handlebars';\nimport nodemailer from 'nodemailer';\nimport path from 'path';\nimport crypto from 'crypto';\n\nimport UserModel from '../models/UserModel';\n\nconst email = process.env.EMAIL;\nconst password = process.env.PASSWORD;\n\nconst smtpTransport = nodemailer.createTransport({\n  service: process.env.EMAIL_PROVIDER,\n  auth: {\n    user: email,\n    pass: password,\n  },\n});\n\nconst handlebarsOptions = {\n  viewEngine: {\n    extName: '.hbs',\n    defaultLayout: null,\n    partialsDir: './templates/',\n    layoutsDir: './templates/',\n  },\n  viewPath: path.resolve('./templates/'),\n  extName: '.html',\n};\n\nsmtpTransport.use('compile', hbs(handlebarsOptions));\n\nconst router = express.Router();\n\nrouter.post('/forgot-password', async (request, response) => {\n  const userEmail = request.body.email;\n  const user = await UserModel.findOne({ email: userEmail });\n  if (!user) {\n    response.status(400).json({ message: 'invalid email', status: 400 });\n    return;\n  }\n\n  // create user token\n  const buffer = crypto.randomBytes(20);\n  const token = buffer.toString('hex');\n\n  // update user reset password token and exp\n  await UserModel.findByIdAndUpdate(\n    { _id: user._id }, { resetToken: token, resetTokenExp: Date.now() + 600000 },\n  );\n\n  // send user password reset email\n  const emailOptions = {\n    to: userEmail,\n    from: email,\n    template: 'forgot-password',\n    subject: 'Zenva Phaser MMO Password Reset',\n    context: {\n      name: 'joe',\n      url: `http://localhost:${process.env.PORT || 3000}/?token=${token}&scene=resetPassword`,\n    },\n  };\n  await smtpTransport.sendMail(emailOptions);\n\n  response.status(200).json({ message: 'An email has been sent to your email address. Password reset link is only valid for 10 minutes.', status: 200 });\n});\n\nrouter.post('/reset-password', async (request, response) => {\n  const userEmail = request.body.email;\n  const user = await UserModel.findOne({\n    resetToken: request.body.token,\n    resetTokenExp: { $gt: Date.now() },\n    email: userEmail,\n  });\n\n  if (!user) {\n    response.status(400).json({ message: 'invalid token', status: 400 });\n    return;\n  }\n\n  // ensure password was provided, and that the password matches the verified password\n  if (!request.body.password || !request.body.verifiedPassword\n    || request.body.password !== request.body.verifiedPassword) {\n    response.status(400).json({ message: 'passwords do not match', status: 400 });\n    return;\n  }\n\n  // update user model\n  user.password = request.body.password;\n  user.resetToken = undefined;\n  user.resetTokenExp = undefined;\n  await user.save();\n\n  // send user password update email\n  const emailOptions = {\n    to: userEmail,\n    from: email,\n    template: 'reset-password',\n    subject: 'Zenva Phaser MMO Password Reset Confirmation',\n    context: {\n      name: user.username,\n    },\n  };\n  await smtpTransport.sendMail(emailOptions);\n\n  response.status(200).json({ message: 'password updated', status: 200 });\n});\n\nexport default router;\n"],"file":"password.js"}