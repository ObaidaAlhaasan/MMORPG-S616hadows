{"version":3,"sources":["../../src/routes/main.js"],"names":["tokenList","router","express","Router","processLogoutRequest","request","response","cookies","refreshToken","refreshJwt","clearCookie","method","status","json","message","sendFile","root","get","post","passport","authenticate","session","next","error","user","Error","login","err","body","_id","email","name","username","token","jwt","sign","process","env","JWT_SECRET","expiresIn","JWT_REFRESH_SECRET","cookie","console","log","route"],"mappings":"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","sourcesContent":["import express from 'express';\nimport passport from 'passport';\nimport jwt from 'jsonwebtoken';\n\nconst tokenList = {};\nconst router = express.Router();\n\nfunction processLogoutRequest(request, response) {\n  if (request.cookies) {\n    const refreshToken = request.cookies.refreshJwt;\n    if (refreshToken in tokenList) delete tokenList[refreshToken];\n    response.clearCookie('jwt');\n    response.clearCookie('refreshJwt');\n  }\n  if (request.method === 'POST') {\n    response.status(200).json({ message: 'logged out', status: 200 });\n  } else if (request.method === 'GET') {\n    response.sendFile('logout.html', { root: './public' });\n  }\n}\n\nrouter.get('/status', (request, response) => {\n  response.status(200).json({ message: 'ok', status: 200 });\n});\n\nrouter.post('/signup', passport.authenticate('signup', { session: false }), async (request, response) => {\n  response.status(200).json({ message: 'signup successful', status: 200 });\n});\n\nrouter.post('/login', async (request, response, next) => {\n  // eslint-disable-next-line consistent-return\n  passport.authenticate('login', async (error, user) => {\n    try {\n      if (error) {\n        return next(error);\n      }\n      if (!user) {\n        return next(new Error('email and password are required'));\n      }\n\n      request.login(user, { session: false }, (err) => {\n        if (err) return next(err);\n\n        // create our jwt\n        const body = {\n          _id: user._id,\n          email: user.email,\n          name: user.username,\n        };\n\n        const token = jwt.sign({ user: body }, process.env.JWT_SECRET, { expiresIn: 300 });\n        const refreshToken = jwt.sign(\n          { user: body }, process.env.JWT_REFRESH_SECRET, { expiresIn: 86400 },\n        );\n\n        // store tokens in cookie\n        response.cookie('jwt', token);\n        response.cookie('refreshJwt', refreshToken);\n\n        // store tokens in memory\n        tokenList[refreshToken] = {\n          token,\n          refreshToken,\n          email: user.email,\n          _id: user._id,\n          name: user.username,\n        };\n\n        // send the token to the user\n        return response.status(200).json({ token, refreshToken, status: 200 });\n      });\n    } catch (err) {\n      console.log(err);\n      return next(err);\n    }\n  })(request, response, next);\n});\n\nrouter.route('/logout')\n  .get(processLogoutRequest)\n  .post(processLogoutRequest);\n\nrouter.post('/token', (request, response) => {\n  const { refreshToken } = request.body;\n  if (refreshToken in tokenList) {\n    const body = {\n      email: tokenList[refreshToken].email,\n      _id: tokenList[refreshToken]._id,\n      name: tokenList[refreshToken].name,\n    };\n    const token = jwt.sign({ user: body }, process.env.JWT_SECRET, { expiresIn: 300 });\n\n    // update jwt\n    response.cookie('jwt', token);\n    tokenList[refreshToken].token = token;\n\n    response.status(200).json({ token, status: 200 });\n  } else {\n    response.status(401).json({ message: 'unauthorized', status: 401 });\n  }\n});\n\nexport default router;\n"],"file":"main.js"}